'''
在scikit_learn中，使用preprocessing.MinMaxScaler实现归一化
重要参数：feature_range控制我们希望把数据压缩的范围，默认[0,1]
在scikit_learn中，使用StandardScaler实现标准化

'''
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler

data = [[-1, 2],[-0.5, 6],[0, 10],[1, 18]]
import pandas as pd
pd.DataFrame(data)
print(pd.DataFrame(data))


#实现归一化
scaler = MinMaxScaler()
result = scaler.fit_transform(data)#训练和道出结果一步达成

#scaler = scaler.fit(data)#训练
#result = scaler.transform(data)#导出结果
print(result)
print(scaler.inverse_transform(result))#将归一化后的结果逆转'''

'''
#归一范围从0-100
scaler = MinMaxScaler(feature_range=[0, 100])
result = scaler.fit_transform(data)
print(result)

#数据量大是，fit可能会报错，用partial_fit
scaler = MinMaxScaler()
scaler = scaler.partial_fit(data)
result = scaler.transform(data)
print(result)'''


#标准化
data  = [[-1,2],[-0.5,6],[0,10],[1,18]]
scaler = StandardScaler()
scaler.fit(data)
StandardScaler(copy=True,with_mean=True,with_std=True)
print(scaler.mean_, scaler.var_)#均值属性mean_   方差属性var_
result = scaler.fit_transform(data)
print(result.mean(),result.std())#均值，方差
print(result)
