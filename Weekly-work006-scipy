import scipy.constants as C#数学物理常数
import scipy.special as spl#特殊函数库
import numpy as np
import matplotlib.pyplot as plt
from scipy import integrate#定积分计算，数值采样分析计算，解常微分方程
from scipy.optimize import optimize
from scipy.optimize import curve_fit
from scipy import optimize
from scipy import signal

#print(C.pi)
#print(C.g)
#x = np.linspace(0, 20, 500)
#绘制a为三种不同值时的贝塞尔函数曲线
'''for i in range(3):
    y = spl.jv(i, x)
    plt.plot(x, y, '-', label = "J%d"%i)'''
#定积分计算
'''x = np.linspace(-2, 4, 100)
y = x**2+3
Y = lambda x: x ** 2 + 3
print(integrate.quad(Y, -2, 4))'''
#数值采样积分
'''x = np.linspace(-2, 4, 10)
y = lambda x:x**2+3
Y= y(x)
print(integrate.trapz(Y, x))
plt.plot(x, Y)'''
'''#优化
func = lambda x: x[0]**3 + x[1]**3 + np.cos(x[2] + 1)#定义被求最小值函数
x0 = np.array([0, 0, 0])#猜测的结果
res = optimize.minimize(func, x0)#求最小值点
print("y=%f when x=%s"%func(res.x), x0)'''
'''#拟合
def fun(x, a, b, c):
    return a * np.exp(-b * x) + c
xdata = np.linspace(0, 4, 50)
y = fun(xdata, 2.5, 1.3, 0.5)
np.random.seed(1729)
y_noise = 0.2 * np.random.normal(size=xdata.size)
ydata = y + y_noise
popt,pcov = curve_fit(fun, xdata ,ydata)
print(popt)'''
'''#方程组求解root（）
def func(x):
    return [
        x[0]**2 + x[1]**2 - x[2] / 5 - 3,
        x[0]**2 +x[1]/5-x[2]+1,
        x[0]+x[1]+x[2]-7
    ]
sol = optimize.root(func,[0, 0, 0])
print(sol.x)
'''
x = np.array([1.0, 2.5, 3.0, 2.0])
h = np.array([0.7, 1.3])
print(signal.convolve(x, h))





plt.show()
