from sklearn.datasets import make_blobs
from sklearn.svm import SVC
from sklearn import svm
import matplotlib.pyplot as plt
import numpy as np
X , y = make_blobs(n_samples=50,centers=2,random_state=0,cluster_std=0.6)
plt.scatter(X[:,0],X[:,1],c=y,s=50,cmap="rainbow")
plt.xticks([])
plt.yticks([])


#首先要有散点图
plt.scatter(X[:,0],X[:,1],c=y,s=50,cmap="rainbow")
ax = plt.gca()#获取当前子图如果不存在创建新的子图
xlim = ax.get_xlim()
ylim = ax.get_ylim()#默认创建（0.0,1.0）范围内的横纵坐标
axisx = np.linspace(xlim[0],xlim[1],30)
axisy = np.linspace(ylim[0],ylim[1],30)
print(np.linspace(xlim[0],xlim[1],30).shape)
axisy,axisx = np.meshgrid(axisy,axisx)#将两个特征向量广播，获取y.shape*x.shape个横纵坐标
xy = np.vstack([axisx.ravel(), axisy.ravel()]).T#获取y.shape*x.shape个坐标点
#ravel（）为降维函数vstack可以将多个结构一致的一维数组按行堆叠起来
#xy就是已经形成的网络，他是遍布在整个画布上的密集的点
print(xy.shape)
#建模。通过fit计算出对应的决策边界
clf = SVC(kernel= "linear").fit(X,y)
P = clf.decision_function(xy).reshape(axisx.shape)
#重要借口decision_function，返回每个输入的样本所有对应的到决策边界的距离
#然后再将这个距离转换为axisx的结构
#画决策边界和平行与决策边界的超平面
ax.contour(axisx,axisy,P
           ,colors="k"
           ,levels=[-1,0,1]
           ,alpha=0.5
           ,linestyles=["--","-","--"])
ax.set_xlim(xlim)
ax.set_ylim(ylim)
plt.show()
